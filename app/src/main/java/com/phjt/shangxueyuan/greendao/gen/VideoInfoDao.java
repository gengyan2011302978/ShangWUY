package com.phjt.shangxueyuan.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.phjt.shangxueyuan.bean.model.VideoInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_INFO".
*/
public class VideoInfoDao extends AbstractDao<VideoInfo, String> {

    public static final String TABLENAME = "VIDEO_INFO";

    /**
     * Properties of entity VideoInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IsEditCheckedFake = new Property(0, boolean.class, "isEditCheckedFake", false, "IS_EDIT_CHECKED_FAKE");
        public final static Property VideoFileId = new Property(1, String.class, "videoFileId", true, "VIDEO_FILE_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Duration = new Property(3, int.class, "duration", false, "DURATION");
        public final static Property ImgUrl = new Property(4, String.class, "imgUrl", false, "IMG_URL");
        public final static Property LocalVideoPath = new Property(5, String.class, "localVideoPath", false, "LOCAL_VIDEO_PATH");
        public final static Property DownloadState = new Property(6, int.class, "downloadState", false, "DOWNLOAD_STATE");
        public final static Property TaskId = new Property(7, int.class, "taskId", false, "TASK_ID");
        public final static Property IsEditChecked = new Property(8, boolean.class, "isEditChecked", false, "IS_EDIT_CHECKED");
        public final static Property TotalFileSize = new Property(9, int.class, "totalFileSize", false, "TOTAL_FILE_SIZE");
    }


    public VideoInfoDao(DaoConfig config) {
        super(config);
    }
    
    public VideoInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_INFO\" (" + //
                "\"IS_EDIT_CHECKED_FAKE\" INTEGER NOT NULL ," + // 0: isEditCheckedFake
                "\"VIDEO_FILE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 1: videoFileId
                "\"NAME\" TEXT," + // 2: name
                "\"DURATION\" INTEGER NOT NULL ," + // 3: duration
                "\"IMG_URL\" TEXT," + // 4: imgUrl
                "\"LOCAL_VIDEO_PATH\" TEXT," + // 5: localVideoPath
                "\"DOWNLOAD_STATE\" INTEGER NOT NULL ," + // 6: downloadState
                "\"TASK_ID\" INTEGER NOT NULL ," + // 7: taskId
                "\"IS_EDIT_CHECKED\" INTEGER NOT NULL ," + // 8: isEditChecked
                "\"TOTAL_FILE_SIZE\" INTEGER NOT NULL );"); // 9: totalFileSize
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIsEditCheckedFake() ? 1L: 0L);
 
        String videoFileId = entity.getVideoFileId();
        if (videoFileId != null) {
            stmt.bindString(2, videoFileId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getDuration());
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(5, imgUrl);
        }
 
        String localVideoPath = entity.getLocalVideoPath();
        if (localVideoPath != null) {
            stmt.bindString(6, localVideoPath);
        }
        stmt.bindLong(7, entity.getDownloadState());
        stmt.bindLong(8, entity.getTaskId());
        stmt.bindLong(9, entity.getIsEditChecked() ? 1L: 0L);
        stmt.bindLong(10, entity.getTotalFileSize());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIsEditCheckedFake() ? 1L: 0L);
 
        String videoFileId = entity.getVideoFileId();
        if (videoFileId != null) {
            stmt.bindString(2, videoFileId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getDuration());
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(5, imgUrl);
        }
 
        String localVideoPath = entity.getLocalVideoPath();
        if (localVideoPath != null) {
            stmt.bindString(6, localVideoPath);
        }
        stmt.bindLong(7, entity.getDownloadState());
        stmt.bindLong(8, entity.getTaskId());
        stmt.bindLong(9, entity.getIsEditChecked() ? 1L: 0L);
        stmt.bindLong(10, entity.getTotalFileSize());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public VideoInfo readEntity(Cursor cursor, int offset) {
        VideoInfo entity = new VideoInfo( //
            cursor.getShort(offset + 0) != 0, // isEditCheckedFake
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // videoFileId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // duration
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imgUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // localVideoPath
            cursor.getInt(offset + 6), // downloadState
            cursor.getInt(offset + 7), // taskId
            cursor.getShort(offset + 8) != 0, // isEditChecked
            cursor.getInt(offset + 9) // totalFileSize
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoInfo entity, int offset) {
        entity.setIsEditCheckedFake(cursor.getShort(offset + 0) != 0);
        entity.setVideoFileId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDuration(cursor.getInt(offset + 3));
        entity.setImgUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLocalVideoPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDownloadState(cursor.getInt(offset + 6));
        entity.setTaskId(cursor.getInt(offset + 7));
        entity.setIsEditChecked(cursor.getShort(offset + 8) != 0);
        entity.setTotalFileSize(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(VideoInfo entity, long rowId) {
        return entity.getVideoFileId();
    }
    
    @Override
    public String getKey(VideoInfo entity) {
        if(entity != null) {
            return entity.getVideoFileId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VideoInfo entity) {
        return entity.getVideoFileId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
